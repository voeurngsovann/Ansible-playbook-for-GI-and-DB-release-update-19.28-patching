- name: Finish Database Release Update
  hosts: dbservers
  vars:
    new_db_home: /u01/app/oracle/product/19.28/dbhome_1
    old_db_home: /u01/app/oracle/product/19.27/dbhome_1
    patch_dir: /home/oracle/soft
    recovery_script_dest_dir: /home/oracle
    recovery_script_dir: /home/ansible/projects/ansible_playbooks_latest
  remote_user: oracle
  tasks:
    - name: Remove response file from stage directory
      ansible.builtin.file:
        path: "{{ patch_dir }}/db_oop.rsp"
        state: absent
    
    - name: Copy old db home dependent network files to the new db home
      ansible.builtin.copy:
        src: "{{ old_db_home }}/network/admin/"
        dest: "{{ new_db_home }}/network/admin/"
        owner: oracle
        group: oinstall
        remote_src: yes
    
    - name: Copy old db home dependent dbs parameter files to the new db home
      ansible.builtin.copy:
        src: "{{ old_db_home }}/dbs/"
        dest: "{{ new_db_home }}/dbs/"
        owner: oracle
        group: oinstall
        remote_src: yes
    
    - name: Copy old db home dependent customized files to the new db home
      ansible.builtin.copy:
        src: "{{ old_db_home }}/sqlplus/admin/glogin.sql"
        dest: "{{ new_db_home }}/sqlplus/admin/"
        owner: oracle
        group: oinstall
        remote_src: yes

    - name: Relink unified auditing in new_dbhome
      ansible.builtin.command:
        cmd: "make -f ins_rdbms.mk uniaud_on ioracle"
        chdir: "{{ new_db_home }}/rdbms/lib"
      environment:
        ORACLE_HOME: "{{ new_db_home }}"
    
    - name: Register databases
      ansible.builtin.shell:
        cmd: "ps -ef | grep ora_pmon | grep -v grep | awk '{ print $NF }' | cut -c10-50 |  awk '{print substr($1, 1, length($1)-1)}'"
      register: find_databases
      tags: finddb

    - name: Register instances
      ansible.builtin.shell:
        cmd: "ps -ef | grep ora_pmon | grep -v grep | awk '{ print $NF }' | cut -c10-50"
      register: find_instances
      tags: findinstance


    - name: Modify databases with srvctl to run from new_dbhome
      ansible.builtin.shell:
       cmd: |
         export ORACLE_HOME={{ new_db_home }}
         export PATH=$ORACLE_HOME/bin:$PATH
         srvctl modify database -d {{ item }} -oraclehome {{ new_db_home }}
      loop: "{{ find_databases.stdout_lines }}"
      run_once: true
      become: yes
      become_user: oracle
      tags: modifydatabase

    - name: Bounce instances and start from new_dbhome
      ansible.builtin.shell:
        cmd: |
          export dbname=$(echo {{ item }} | awk '{print substr($1, 1, length($1)-1)}')
          export ORACLE_HOME={{ new_db_home }}
          export PATH=$ORACLE_HOME/bin:$PATH
          srvctl stop instance -d $dbname -i {{ item }} -f 
          srvctl start instance -d $dbname -i {{ item }}
      loop: "{{ find_instances.stdout_lines }}"
      throttle: 1
      tags: restartdb

    - name: Remove patch setup folders from stage directory
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ patch_dir }}/GIRU"
        - "{{ patch_dir }}/GIRUOneOff"
        - "{{ patch_dir }}/OJVM"
        - "{{ patch_dir }}/GIMRP"
      tags: removepatch
  # For dataguard copy script for start media recovery       
    - name: Copy start recovery file to remote server
      ansible.builtin.copy:
        src: "{{ recovery_script_dir }}/start_recover_onremote.sh"
        dest: "{{ recovery_script_dest_dir }}"
        owner: oracle
        group: oinstall
        mode: '0750'
    
    - name: Start recovery
      ansible.builtin.command:
        cmd: "{{ recovery_script_dest_dir }}/start_recover_onremote.sh {{ item }} {{ new_db_home }}"
      loop: "{{ find_instances.stdout_lines }}"
      register: recovery_output
    
    - name: Debug Recovery output
      ansible.builtin.debug:
        var: item.stdout
        loop: "{{ recovery_output.results }}" 
