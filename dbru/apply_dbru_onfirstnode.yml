- name: Apply Oracle Database Release Update
  hosts: dbservers
  vars:
    u01_size_mb: 12045
    new_db_home: /u01/app/oracle/product/19.28/dbhome_1
#   old_db_home: /u01/app/oracle/product/19.0.0/dbhome_1
    old_db_home: /u01/app/oracle/product/19.27/dbhome_1
    grid_home: /u01/app/19.28/grid
    patch_dir: /home/oracle/soft
    source_patch_dir: /installer/software/DB28
  remote_user: oracle
  run_once: true
  
  tasks:
    - name: Copy setup files to target server
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: "{{ patch_dir }}/{{ item | basename }}"
        mode: '0755'
        owner: oracle
        group: oinstall
      with_fileglob:
        - "{{source_patch_dir}}/*"
      tags: copying

        
    - name: Unzip new DB_HOME
      ansible.builtin.unarchive:
        src: "{{ patch_dir }}/LINUX.X64_193000_db_home.zip"
        dest: "{{ new_db_home }}"
        remote_src: yes
      tags: unzipdbhome

    - name: Unzip OPatch to new DB_HOME
      ansible.builtin.unarchive:
        src: "{{ patch_dir }}/p6880880_190000_Linux-x86-64.zip"
        dest: "{{ new_db_home }}"
        remote_src: yes
    - name: Unzip GIRU system patch
      ansible.builtin.unarchive:
        src: "{{ patch_dir }}/p37957391_190000_Linux-x86-64.zip"
        dest: "{{ patch_dir }}/GIRU"
        remote_src: yes
      tags: unzipGIRU
    - name: Unzip DATAPUMP Patches 
      ansible.builtin.unarchive:
        src: "{{ patch_dir }}/p38170982_1928000DBRU_Generic.zip"
        dest: "{{ patch_dir }}/DATAPUMP"
        remote_src: yes
    - name: Unzip GIRU oneoff patch
      ansible.builtin.unarchive:
        src: "{{ patch_dir }}/p34672698_1928000DBRU_Linux-x86-64.zip"
        dest: "{{ patch_dir }}/DBRUOneOff"
        remote_src: yes

        
    - name: Register cluster nodes for response file
      ansible.builtin.shell: 
        cmd: "{{ grid_home }}/bin/olsnodes | tr '\n' ',' | sed 's/,$//'"
      register: cluster_nodes

    - name: Register osdba value for response file
      ansible.builtin.shell:
        cmd: "grep 'OSDBA_GROUP=' {{ old_db_home }}/install/response/db_20*.rsp"
      register: osdba
      tags: register

    - name: Register osoper value for response file
      ansible.builtin.shell:
        cmd: "grep 'OSOPER_GROUP=' {{ old_db_home }}/install/response/db_20*.rsp"
      register: osoper
      tags: register 

    - name: Register osbackupdba value for response file
      ansible.builtin.shell:
        cmd: "grep 'OSBACKUPDBA_GROUP=' {{ old_db_home }}/install/response/db_20*.rsp"
      register: osbackupdba
      tags: register

    - name: Register osdgdba value for response file
      ansible.builtin.shell:
        cmd: "grep 'OSDGDBA_GROUP=' {{ old_db_home }}/install/response/db_20*.rsp"
      register: osdgdba
      tags: register

    - name: Register oskmdba value for response file
      ansible.builtin.shell:
        cmd: "grep 'OSKMDBA_GROUP=' {{ old_db_home }}/install/response/db_20*.rsp"
      register: oskmdba
      tags: register

    - name: Register osracdba value for response file
      ansible.builtin.shell:
        cmd: "grep 'OSRACDBA_GROUP=' {{ old_db_home }}/install/response/db_20*.rsp"
      register: osracdba
      tags: register

    - name: Create contents of response file
      ansible.builtin.copy:
        dest: "{{ patch_dir }}/db_oop.rsp"
        content: |
          oracle.install.responseFileVersion=/oracle/install/rspfmt_dbinstall_response_schema_v19.0.0
          oracle.install.option=INSTALL_DB_SWONLY
          UNIX_GROUP_NAME=oinstall
          INVENTORY_LOCATION=/u01/app/oraInventory
          ORACLE_BASE=/u01/app/oracle
          ORACLE_HOME={{ new_db_home }}
          oracle.install.db.InstallEdition=EE
          {{ osdba.stdout }}
          {{ osoper.stdout }}
          {{ osbackupdba.stdout }}
          {{ osdgdba.stdout }}
          {{ oskmdba.stdout }}
          {{ osracdba.stdout }}
          oracle.install.db.CLUSTER_NODES={{ cluster_nodes.stdout }}
          SECURITY_UPDATES_VIA_MYORACLESUPPORT=false
          DECLINE_SECURITY_UPDATES=true
        owner: oracle
        group: oinstall
        mode: '0644'
      tags: createrepos

    - name: Clean up DB home zip files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ patch_dir }}/LINUX.X64_193000_db_home.zip"
        - "{{ patch_dir }}/p37957391_190000_Linux-x86-64.zip"
        - "{{ patch_dir }}/p6880880_190000_Linux-x86-64.zip"
        - "{{ patch_dir }}/p38170982_1928000DBRU_Generic.zip"
        - "{{ patch_dir }}/p34672698_1928000DBRU_Linux-x86-64.zip"

    - name: Check u01 free disk space
      ansible.builtin.shell:
        cmd: "df -P /u01 | awk 'END { print $4 }'"
      register: u01size
      failed_when: u01size.stdout|int < u01_size_mb * 1024

    - name: Apply DBRU and one-offs
      tags: ApplyDBRU
      ansible.builtin.shell:
        cmd: |
          {{ new_db_home }}/runInstaller -silent -ignorePrereqFailure -waitforcompletion  -applyRU {{ patch_dir }}/GIRU/37957391 -applyOneOffs {{ patch_dir }}/DATAPUMP/38170982,{{ patch_dir }}/DBRUOneOff/34672698 -responsefile {{ patch_dir }}/db_oop.rsp
      environment:
        CV_ASSUME_DISTID: OL7
        ORACLE_BASE: "/u01/app/oracle"
        NEWDBHOME: "{{ new_db_home }}"
      register: apply_dbru
      failed_when: "'Successfully Setup Software' not in apply_dbru.stdout"
      async: 3600
      poll: 20

    - name: Output patching success message
      ansible.builtin.debug:
        msg: "Patching succeeded."
      when: apply_dbru.rc in [6,0]     
